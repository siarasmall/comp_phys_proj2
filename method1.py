# -*- coding: utf-8 -*-
"""Method1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i7DrOm9CMHjO4Awt5915MHFgZe53gzAr
"""

import numpy as np
from scipy.sparse import diags
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

NUM=100
dt = 0.1
dx = 0.1

def potential_barrier(V, start, stop, mag):
  for i in range(start, stop):
    V[i][i] = mag

M = diags([np.ones(NUM-1),-2*np.ones(NUM),np.ones(NUM-1)], [-1,0,1]).toarray()
M[0][-1]=1
M[-1][0]=1
I = np.identity(NUM)

# No potential:
V = np.zeros([NUM, NUM])

# Potential barrier:
#V = np.zeros([NUM, NUM])
#potential_barrier(V, 0, 40, 1000)
#potential_barrier(V, 50, 100, 1000)

total = I + 0.5*dt/(1j*dx**2) * M - dt/(1j) * V
# print(total)

inv = np.linalg.inv(total)
# print(inv)

def create_wavepacket(x, wave_center, wave_width, wave_momentum) -> np.ndarray:
    '''
    Creates a wavepacket with the given parameters.

    Params:
      - wave_center (int): The x position of the center of the initial wavepacket.
      - wave_width (int): The width of the initial wavepacket.
      - wave_momentum (int): The momentum of the initial wavepacket.

    Returns:
      np.ndarray: The initial wavepacket.
    '''
    A = (2 * np.pi * wave_width**2)**(-0.25)
    return A * np.exp(1j*wave_momentum*x - ((x - wave_center)/(2 * wave_width))**2)

x = np.array([0 + i*dx for i in range(NUM)])
psi = create_wavepacket(x, 2,1,2)
# for i in range(0, 30):
#   psi[i] = 10/np.sqrt(2*np.pi) * np.exp(-0.5*(i-10)**2)


# print(psi)

fig = plt.figure()
axis = plt.axes(xlim =(0, x[-1]),
                ylim =(-1.5, 1.5))

# initializing a line variable
line1, = axis.plot([], [], 'b', lw = 3)
line2, = axis.plot([], [], 'g', lw = 3)
line3, = axis.plot([], [], 'k', lw = 3)

axis.legend([line1, line2, line3], ['Re(Ψ)', 'Im(Ψ)', '|Ψ|^2'])

def init():
    line1.set_data([], [])
    line2.set_data([], [])
    line3.set_data([], [])
    return line1, line2, line3,

def animate(i):
  global psi

  line1.set_data(x, psi.real)
  line2.set_data(x, psi.imag)
  line3.set_data(x, np.power(np.absolute(psi),2))
  psi = np.matmul(inv, psi)

  return line1, line2, line3,

anim = FuncAnimation(fig, animate, init_func = init, frames = 300, interval = 1, blit = True)

anim.save('test.mp4', writer = 'ffmpeg', fps = 30)

